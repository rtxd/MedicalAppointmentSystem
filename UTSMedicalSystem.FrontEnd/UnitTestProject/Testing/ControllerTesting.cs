using UTSMedicalSystem.FrontEnd.Controllers; using Microsoft.AspNetCore.Mvc;  using Microsoft.EntityFrameworkCore; using Microsoft.VisualStudio.TestTools.UnitTesting; using UTSMedicalSystem.FrontEnd.Data; using System.Threading.Tasks;
using System;
using UTSMedicalSystem.FrontEnd.Models;

namespace UnitTestProject.Testing {     [TestClass]     public class ControllerTesting     {         //Testing HomeController         [TestMethod]         public void TestingHCIdexViewType()         {             //Arrange             var controller = new HomeController();              //Act             var result = controller.Index();               //Assert             Assert.IsNotNull(result);             Assert.IsInstanceOfType(result,typeof(ViewResult));         }           [TestMethod]         public void TestingHCAboutViewType()         {             //Arrange             var controller = new HomeController();              //Act             var result = controller.About();              //Assert             Assert.IsNotNull(result);             Assert.IsInstanceOfType(result, typeof(ViewResult));          }           [TestMethod]         public void TestingHCContactViewType()         {             //Arrange             var controller = new HomeController();              //Act             var result = controller.Contact();              //Assert             Assert.IsNotNull(result);             Assert.IsInstanceOfType(result, typeof(ViewResult));          }         //Testing PatientController          [TestMethod]         public async Task TestingPCIdexViewTypeAsync()         {             //Arrange             var options = new DbContextOptionsBuilder<MedicalSystemContext>()                 .UseInMemoryDatabase(databaseName: "TestingPCIdexViewTypeAsync")                 .Options;             var context = new MedicalSystemContext(options) ;              var controller = new PatientsController(context);              var result = await controller.Index();              //Assert             Assert.IsNotNull(result);           // Assert.IsInstanceOfType(result, typeof(Task<IActionResult>));            // Assert.IsInstanceOfType(result, typeof(ViewResult));         }           [TestMethod]         public void TestingPCDetailsViewType()         {         //Arrange         var options = new DbContextOptionsBuilder<MedicalSystemContext>()             .UseInMemoryDatabase(databaseName: "TestingPCDetailsViewType")             .Options;         var context = new MedicalSystemContext(options);          var controller = new PatientsController(context);                  var result =  controller.Details(1);          //Assert         Assert.IsNotNull(result);         Assert.IsInstanceOfType(result, typeof(Task<IActionResult>));         }             [TestMethod]         public void TestingPCDetailsViewError()         {         //Arrange         var options = new DbContextOptionsBuilder<MedicalSystemContext>()             .UseInMemoryDatabase(databaseName: "TestingPCDetailsViewError")             .Options;         var context = new MedicalSystemContext(options);         var controller = new PatientsController(context);                  //act         var result = controller.Details(null);             //Assert         Assert.IsNotNull(result);         Assert.IsTrue(result.IsCompleted);         Assert.IsInstanceOfType(result, typeof(Task<IActionResult>));   
        }          //Testing Appointment Controller          [TestMethod]         public void TestingACGetNameIDInvaild()         {
            var options = new DbContextOptionsBuilder<MedicalSystemContext>()
                .UseInMemoryDatabase(databaseName: "TestingACGetNameIDInvaild")
                .Options;               var context = new MedicalSystemContext(options);             seed(context);             var controller = new AppointmentsController(context);              //Act             var result = controller.getName(999999);              //Assert              Assert.AreEqual("Error: Invalid User",result);         }         [TestMethod]         public void TestingACGetNameIDVaild()         {             var options = new DbContextOptionsBuilder<MedicalSystemContext>()                 .UseInMemoryDatabase(databaseName: "TestingACGetNameIDVaild")                 .Options;               var context = new MedicalSystemContext(options);             seed(context);             var controller = new AppointmentsController(context);              //Act             var result = controller.getName(1);              //Assert              Assert.AreEqual("Alex Alex", result);         }          [TestMethod]         public void TestingACGetNameIDVaildDoctor()         {             var options = new DbContextOptionsBuilder<MedicalSystemContext>()                 .UseInMemoryDatabase(databaseName: "TestingACGetNameIDVaildDoctor")                 .Options;               var context = new MedicalSystemContext(options);             seed(context);             var controller = new AppointmentsController(context);              //Act             var result = controller.getName(7);              //Assert              Assert.AreEqual("Dr Goat", result);         }   
        //Dummy Data
        private void seed(MedicalSystemContext context)
        {             var users = new[]{
                new User { ID = 1, AspNetUserId = "1" ,FirstName = "Alex", LastName ="Alex", DOB = "01/01/2001", UTSID = "11111111", History = "Broken leg", Role = "Patient"},
                new User { ID = 2, AspNetUserId = "2", FirstName = "Ben", LastName = "Bruh", DOB = "02/02/2002", UTSID = "22222222", History = "Broken arm", Role = "Patient" },
                new User { ID = 3, AspNetUserId = "3", FirstName = "Carl", LastName = "Car", DOB = "03/03/2003", UTSID = "33333333", History = "Heart transpant", Role = "Patient" },
                new User { ID = 4, AspNetUserId = "4", FirstName = "Daniel", LastName = "Doug", DOB = "04/04/2004", UTSID = "44444444", History = "Dizzy Spells", Role = "Patient" },
                new User { ID = 5, AspNetUserId = "5", FirstName = "Eggie", LastName = "Excellent", DOB = "05/05/2005", UTSID = "55555555", History = "Amputated arm", Role = "Patient" },
                new User { ID = 6, AspNetUserId = "6", FirstName = "Freddie", LastName = "Frog", DOB = "06/06/2006", UTSID = "66666666", History = "Amputated leg", Role = "Receptionist" },
                new User { ID = 7, AspNetUserId = "7", FirstName = "Gabbie", LastName = "Goat", DOB = "07/07/2007", UTSID = "77777777", History = "Amputated head", Role = "Doctor" }, 
            };             context.Users.AddRange(users);             context.SaveChanges();         }
    } } 